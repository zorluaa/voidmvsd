local Luna = loadstring(game:HttpGet("https://raw.githubusercontent.com/Nebula-Softworks/Luna-Interface-Suite/refs/heads/main/source.lua", true))()

local Window = Luna:CreateWindow({
	Name = "Void.lua Murder Vs Sheriff", -- This Is Title Of Your Window
	Subtitle = nil, -- A Gray Subtitle next To the main title.
	LogoID = "82795327169782", -- The Asset ID of your logo. Set to nil if you do not have a logo for Luna to use.
	LoadingEnabled = true, -- Whether to enable the loading animation. Set to false if you do not want the loading screen or have your own custom one.
	LoadingTitle = "Void.lua", -- Header for loading screen
	LoadingSubtitle = "The Best Free Script ", -- Subtitle for loading screen

	ConfigSettings = {
		RootFolder = nil, -- The Root Folder Is Only If You Have A Hub With Multiple Game Scripts and u may remove it. DO NOT ADD A SLASH
		ConfigFolder = "Void" -- The Name Of The Folder Where Luna Will Store Configs For This Script. DO NOT ADD A SLASH
	},

	KeySystem = false, -- As Of Beta 6, Luna Has officially Implemented A Key System!
	KeySettings = {
		Title = "Void Key",
		Subtitle = "Key System",
		SaveInRoot = false, -- Enabling will save the key in your RootFolder (YOU MUST HAVE ONE BEFORE ENABLING THIS OPTION)
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		Key = {"VoidMVSD"}, -- List of keys that will be accepted by the system, please use a system like Pelican or Luarmor that provide key strings based on your HWID since putting a simple string is very easy to bypass
		SecondAction = {
			Enabled = true, -- Set to false if you do not want a second action,
			Type = "Link", -- Link / Discord.
			Parameter = "" -- If Type is Discord, then put your invite link (DO NOT PUT DISCORD.GG/). Else, put the full link of your key system here.
		}
	}
})

Window:CreateHomeTab({
	SupportedExecutors = {}, -- A Table Of Executors Your Script Supports. Add strings of the executor names for each executor.
	DiscordInvite = "CM8dZRX4aK", -- The Discord Invite Link. Do Not Include discord.gg/ | Only Include the code.
	Icon = 1, -- By Default, The Icon Is The Home Icon. If You would like to change it to dashboard, replace the interger with 2
})


local Tab1 = Window:CreateTab({
	Name = "Main",
	Icon = "view_in_ar",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

local Tab2 = Window:CreateTab({
	Name = "Aiming",
	Icon = "view_in_ar",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

local Tab3 = Window:CreateTab({
	Name = "Misc",
	Icon = "view_in_ar",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

local Tab4 = Window:CreateTab({
	Name = "ESP",
	Icon = "view_in_ar",
	ImageSource = "Material",
	ShowTitle = true -- This will determine whether the big header text in the tab will show
})

--- Sections

Tab1:CreateSection("This tab includes kill all & auto teleport to pads!")

local Label = Tab1:CreateLabel({
	Text = "Go into a 1v1 game then enable kill all!",
	Style = 2 -- Luna Labels Have 3 Styles : A Basic Label, A Green Information Label and A Red Warning Label. Look At The Following Image For More Details
})



-- Script Logic

local killAllEnabled = false

-- Function to handle enabling the kill functionality
function EnableKillAll()
    while killAllEnabled do
        local success, err = pcall(function()
            local Backpack = game:GetService("Players").LocalPlayer.Backpack:GetChildren()
            local gun = nil

            -- Equip Gun If Not Equipped
            for i, v in pairs(Backpack) do
                if v:FindFirstChildWhichIsA("Sound") then
                    gun = v
                    gun.Parent = game:GetService("Players").LocalPlayer.Character
                end
            end

            -- Loop through all players in the workspace
            for i, v in pairs(workspace:GetChildren()) do
                if v:IsA("Model") and game.Players:FindFirstChild(v.Name) and v.Name ~= game.Players.LocalPlayer.Name and not v:FindFirstChild("Highlight") then
                    -- Define arguments for the shooting action
                    local args = {
                        [1] = Vector3.new(-265.2897033691406, 62.42794036865334, 162.05580139160156),  -- Target position
                        [2] = Vector3.new(-219.57574462890625, 54.045166015625, 319.8157653808594),
                        [3] = v.LeftLowerArm.Part, -- You might want to use FindFirstChild("LeftLowerArm") here
                        [4] = Vector3.new(-234.1997833251953, 58.66779708862305, 272.2261657714844)
                    }

                    -- Fire the remote to trigger the shooting action
                    game:GetService("ReplicatedStorage").Remotes.Shoot:FireServer(unpack(args))
                end
            end
        end)

        if not success then
            warn("Error in EnableKillAll: " .. tostring(err))
        end

        task.wait(0.1)
    end
end

-- Integrate with your toggle
local Toggle = Tab1:CreateToggle({
	Name = "Kill All",
	Description = "Automatically attacks all players in the game",
	CurrentValue = false,
	Callback = function(Value)
		killAllEnabled = Value
		print("Kill All Enabled:", Value)

		if Value then
			task.spawn(EnableKillAll)
		else
			killAllEnabled = false
		end
	end
}, "KillAllToggle")




local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

local DuelPads = {
    ["Pad1"] = Workspace.Lobby:GetChildren()[2].DuelRing_1v1:GetChildren()[3].Pad,
    ["Pad2"] = Workspace.Lobby:GetChildren()[2].DuelRing_2v2:GetChildren()[3].Pad,
    ["Pad3"] = Workspace.Lobby:GetChildren()[2].DuelRing_3v3:GetChildren()[3].Pad,
    ["Pad4"] = Workspace.Lobby:GetChildren()[2].DuelRing_4v4:GetChildren()[3].Pad
}

local Toggles = {
    ["Pad1"] = false,
    ["Pad2"] = false,
    ["Pad3"] = false,
    ["Pad4"] = false
}

local function TeleportLoop(pad)
    while Toggles[pad] do
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            LocalPlayer.Character.HumanoidRootPart.CFrame = DuelPads[pad].CFrame
        end
        task.wait(1)
    end
end

local TogglePad1 = Tab1:CreateToggle({
	Name = "Teleport to Pad1",
	Description = "Toggle to teleport to Pad1",
	CurrentValue = false,
	Callback = function(Value)
		Toggles["Pad1"] = Value
		if Value then
			task.spawn(function() TeleportLoop("Pad1") end)
		end
	end
}, "Toggle_Pad1")

local TogglePad2 = Tab1:CreateToggle({
	Name = "Teleport to Pad2",
	Description = "Toggle to teleport to Pad2",
	CurrentValue = false,
	Callback = function(Value)
		Toggles["Pad2"] = Value
		if Value then
			task.spawn(function() TeleportLoop("Pad2") end)
		end
	end
}, "Toggle_Pad2")

local TogglePad3 = Tab1:CreateToggle({
	Name = "Teleport to Pad3",
	Description = "Toggle to teleport to Pad3",
	CurrentValue = false,
	Callback = function(Value)
		Toggles["Pad3"] = Value
		if Value then
			task.spawn(function() TeleportLoop("Pad3") end)
		end
	end
}, "Toggle_Pad3")

local TogglePad4 = Tab1:CreateToggle({
	Name = "Teleport to Pad4",
	Description = "Toggle to teleport to Pad4",
	CurrentValue = false,
	Callback = function(Value)
		Toggles["Pad4"] = Value
		if Value then
			task.spawn(function() TeleportLoop("Pad4") end)
		end
	end
}, "Toggle_Pad4")




local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")

-- Initial settings
local isEnabled = false
local hitboxSize = 10
local transparency = 0.5
local boxColor = Color3.fromRGB(255, 255, 255)

-- Function to apply hitbox changes
local function modifyHitboxes()
	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			local rootPart = player.Character.HumanoidRootPart
			rootPart.Size = Vector3.new(hitboxSize, hitboxSize, hitboxSize)
			rootPart.Transparency = transparency
			rootPart.Material = Enum.Material.Neon
			rootPart.CanCollide = true
			rootPart.Color = boxColor
		end
	end
end

-- Reset hitboxes to normal
local function resetHitboxes()
	for _, player in pairs(Players:GetPlayers()) do
		if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			local rootPart = player.Character.HumanoidRootPart
			rootPart.Size = Vector3.new(2, 2, 1)
			rootPart.Transparency = 0
			rootPart.Material = Enum.Material.Plastic
			rootPart.CanCollide = true
			rootPart.Color = Color3.fromRGB(255, 255, 255)
		end
	end
end

-- Constant update loop if enabled
RunService.RenderStepped:Connect(function()
	if isEnabled then
		modifyHitboxes()
	end
end)

-- Hitbox Expander Toggle
local ToggleHitbox = Tab2:CreateToggle({
	Name = "Hitbox Expander",
	Description = "Expands enemy hitboxes to make aiming easier",
	CurrentValue = false,
	Callback = function(Value)
		isEnabled = Value
		print("Hitbox Modifier Enabled:", Value)
		if not Value then
			resetHitboxes()
		end
	end
}, "HitboxToggle")

-- Hitbox Size Slider
local SliderSize = Tab2:CreateSlider({
	Name = "Hitbox Size",
	Range = {2, 50},
	Increment = 1,
	CurrentValue = hitboxSize,
	Callback = function(Value)
		hitboxSize = Value
		print("Hitbox Size:", Value)
		if isEnabled then
			modifyHitboxes()
		end
	end
}, "HitboxSizeSlider")

-- Transparency Slider
local SliderTransparency = Tab2:CreateSlider({
	Name = "Transparency",
	Range = {0, 100},
	Increment = 1,
	CurrentValue = transparency * 100,
	Callback = function(Value)
		transparency = Value / 100
		print("Transparency:", transparency)
		if isEnabled then
			modifyHitboxes()
		end
	end
}, "TransparencySlider")

-- Color Picker
local ColorPicker = Tab2:CreateColorPicker({
	Name = "Hitbox Color",
	Color = boxColor,
	Flag = "HitboxColorPicker",
	Callback = function(Value)
		boxColor = Value
		print("Box Color:", Value)
		if isEnabled then
			modifyHitboxes()
		end
	end
}, "HitboxColorPicker")



local InfiniteJumpEnabled = false
Tab3:CreateToggle({
	Name = "Infinite Jump",
	CurrentValue = false,
	Flag = "InfiniteJumpToggle",
	Callback = function(Value)
		InfiniteJumpEnabled = Value
		if InfiniteJumpEnabled then
			game:GetService("UserInputService").JumpRequest:Connect(function()
				local humanoid = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
				if humanoid then humanoid:ChangeState(Enum.HumanoidStateType.Jumping) end
			end)
		end
	end
})



local NoClipEnabled = false
Tab3:CreateToggle({
	Name = "NoClip",
	CurrentValue = false,
	Flag = "NoClipToggle",
	Callback = function(Value)
		NoClipEnabled = Value
		game:GetService("RunService").Stepped:Connect(function()
			if NoClipEnabled then
				for _, part in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
					if part:IsA("BasePart") then part.CanCollide = false end
				end
			end
		end)
	end
})



local FlyEnabled = false
local FlySpeed = 50
local BodyVelocity

local function EnableFly()
	local rootPart = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
	BodyVelocity = Instance.new("BodyVelocity")
	BodyVelocity.MaxForce = Vector3.new(1e5, 1e5, 1e5)
	BodyVelocity.Velocity = Vector3.zero
	BodyVelocity.Parent = rootPart

	game:GetService("RunService").RenderStepped:Connect(function()
		if not FlyEnabled then BodyVelocity:Destroy() return end
		local UIS = game:GetService("UserInputService")
		local direction = Vector3.zero
		if UIS:IsKeyDown(Enum.KeyCode.W) then direction += Vector3.new(0, 0, -1) end
		if UIS:IsKeyDown(Enum.KeyCode.S) then direction += Vector3.new(0, 0, 1) end
		if UIS:IsKeyDown(Enum.KeyCode.A) then direction += Vector3.new(-1, 0, 0) end
		if UIS:IsKeyDown(Enum.KeyCode.D) then direction += Vector3.new(1, 0, 0) end
		if UIS:IsKeyDown(Enum.KeyCode.Space) then direction += Vector3.new(0, 1, 0) end
		if UIS:IsKeyDown(Enum.KeyCode.LeftControl) then direction += Vector3.new(0, -1, 0) end
		BodyVelocity.Velocity = direction.Magnitude > 0 and direction.Unit * FlySpeed or Vector3.zero
	end)
end

Tab3:CreateToggle({
	Name = "Fly",
	CurrentValue = false,
	Flag = "FlyToggle",
	Callback = function(Value)
		FlyEnabled = Value
		if FlyEnabled then EnableFly() else if BodyVelocity then BodyVelocity:Destroy() end end
	end
})

Tab3:CreateSlider({
	Name = "Fly Speed",
	Range = {10, 200},
	Increment = 1,
	CurrentValue = 50,
	Flag = "FlySpeedSlider",
	Callback = function(Value)
		FlySpeed = Value
	end
})



Tab3:CreateSlider({
	Name = "Walk Speed",
	Range = {16, 399},
	Increment = 1,
	CurrentValue = 16,
	Flag = "WalkSpeedSlider",
	Callback = function(Value)
		local h = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
		if h then h.WalkSpeed = Value end
	end
})

Tab3:CreateSlider({
	Name = "Jump Power",
	Range = {16, 399},
	Increment = 1,
	CurrentValue = 50,
	Flag = "JumpPowerSlider",
	Callback = function(Value)
		local h = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
		if h then h.JumpPower = Value end
	end
})



local FloatEnabled = false
local FloatHeight = 0
local BodyPosition

local function EnableFloat()
	local root = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
	FloatHeight = root.Position.Y

	BodyPosition = Instance.new("BodyPosition")
	BodyPosition.MaxForce = Vector3.new(0, 1e5, 0)
	BodyPosition.P = 1e4
	BodyPosition.D = 100
	BodyPosition.Position = Vector3.new(root.Position.X, FloatHeight, root.Position.Z)
	BodyPosition.Parent = root

	game:GetService("RunService").RenderStepped:Connect(function()
		if FloatEnabled then
			BodyPosition.Position = Vector3.new(root.Position.X, FloatHeight, root.Position.Z)
		else
			BodyPosition:Destroy()
		end
	end)
end

Tab3:CreateToggle({
	Name = "Float",
	CurrentValue = false,
	Flag = "FloatToggle",
	Callback = function(Value)
		FloatEnabled = Value
		if FloatEnabled then EnableFloat() end
	end
})

Tab3:CreateSlider({
	Name = "Float Height",
	Range = {0, 100},
	Increment = 1,
	CurrentValue = 0,
	Flag = "FloatHeightSlider",
	Callback = function(Value)
		FloatHeight = Value
	end
})


local antiAFKConnection
Tab3:CreateToggle({
	Name = "Anti-AFK",
	CurrentValue = false,
	Flag = "AntiAFK",
	Callback = function(Value)
		if Value then
			antiAFKConnection = game:GetService("RunService").Heartbeat:Connect(function()
				game.Players.LocalPlayer.Character.Humanoid:Move(Vector3.new())
			end)
		elseif antiAFKConnection then
			antiAFKConnection:Disconnect()
		end
	end
})


local fovEnabled = false
local fovValue = 70

local function ChangeFOV()
	while fovEnabled do
		game.Workspace.CurrentCamera.FieldOfView = fovValue
		wait(0.1)
	end
end

Tab3:CreateToggle({
	Name = "Enable/Disable FOV",
	CurrentValue = false,
	Flag = "FOVToggle",
	Callback = function(Value)
		fovEnabled = Value
		if fovEnabled then ChangeFOV() end
	end
})

Tab3:CreateSlider({
	Name = "FOV",
	Range = {70, 240},
	Increment = 1,
	CurrentValue = 70,
	Flag = "FOVSlider",
	Callback = function(Value)
		fovValue = Value
	end
})



-- Esp


local settings = {
    BoxESP = {
        Enabled = false,
        Color = Color3.fromRGB(255, 255, 255),
        Thickness = 2,
    },
    NameESP = {
        Enabled = false,
        Color = Color3.fromRGB(255, 255, 255),
        Size = 15,
    },
}

local players = game:GetService("Players")
local runService = game:GetService("RunService")
local camera = game.Workspace.CurrentCamera
local localPlayer = players.LocalPlayer
local espObjects = {}

-- Create Drawing
local function createDrawing(type, properties)
    local obj = Drawing.new(type)
    for prop, value in pairs(properties) do
        obj[prop] = value
    end
    return obj
end

-- ESP for Player
local function createESPForPlayer(player)
    local espData = {
        Box = {
            Top = createDrawing("Line", {Thickness = settings.BoxESP.Thickness, Color = settings.BoxESP.Color}),
            Bottom = createDrawing("Line", {Thickness = settings.BoxESP.Thickness, Color = settings.BoxESP.Color}),
            Left = createDrawing("Line", {Thickness = settings.BoxESP.Thickness, Color = settings.BoxESP.Color}),
            Right = createDrawing("Line", {Thickness = settings.BoxESP.Thickness, Color = settings.BoxESP.Color}),
        },
        Name = createDrawing("Text", {
            Size = settings.NameESP.Size,
            Color = settings.NameESP.Color,
            Center = true,
        }),
    }
    espObjects[player] = espData
end

local function cleanupESPForPlayer(player)
    if espObjects[player] then
        for _, obj in pairs(espObjects[player].Box) do
            obj:Remove()
        end
        if espObjects[player].Name then
            espObjects[player].Name:Remove()
        end
        espObjects[player] = nil
    end
end

local function updateESP()
    for player, data in pairs(espObjects) do
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = player.Character.HumanoidRootPart
            local screenPos, onScreen = camera:WorldToViewportPoint(hrp.Position)

            if onScreen then
                -- Box ESP
                if settings.BoxESP.Enabled then
                    local size = Vector3.new(2, 3, 0)
                    local topLeft = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(size.X, size.Y, 0)).Position)
                    local topRight = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(-size.X, size.Y, 0)).Position)
                    local bottomLeft = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(size.X, -size.Y, 0)).Position)
                    local bottomRight = camera:WorldToViewportPoint((hrp.CFrame * CFrame.new(-size.X, -size.Y, 0)).Position)

                    local box = data.Box
                    box.Top.From = Vector2.new(topLeft.X, topLeft.Y)
                    box.Top.To = Vector2.new(topRight.X, topRight.Y)
                    box.Bottom.From = Vector2.new(bottomLeft.X, bottomLeft.Y)
                    box.Bottom.To = Vector2.new(bottomRight.X, bottomRight.Y)
                    box.Left.From = Vector2.new(topLeft.X, topLeft.Y)
                    box.Left.To = Vector2.new(bottomLeft.X, bottomLeft.Y)
                    box.Right.From = Vector2.new(topRight.X, topRight.Y)
                    box.Right.To = Vector2.new(bottomRight.X, bottomRight.Y)

                    for _, line in pairs(box) do
                        line.Color = settings.BoxESP.Color
                        line.Thickness = settings.BoxESP.Thickness
                        line.Visible = true
                    end
                else
                    for _, line in pairs(data.Box) do
                        line.Visible = false
                    end
                end

                -- Name ESP
                if settings.NameESP.Enabled then
                    local nameTag = data.Name
                    nameTag.Text = player.Name
                    nameTag.Position = Vector2.new(screenPos.X, screenPos.Y - 30)
                    nameTag.Size = settings.NameESP.Size
                    nameTag.Color = settings.NameESP.Color
                    nameTag.Visible = true
                else
                    data.Name.Visible = false
                end
            else
                for _, line in pairs(data.Box) do
                    line.Visible = false
                end
                data.Name.Visible = false
            end
        else
            cleanupESPForPlayer(player)
        end
    end
end

local function setupESPForPlayer(player)
    if player ~= localPlayer then
        cleanupESPForPlayer(player)
        createESPForPlayer(player)
        player.CharacterAdded:Connect(function()
            task.wait(0.1)
            cleanupESPForPlayer(player)
            createESPForPlayer(player)
        end)
    end
end

local function setupESP()
    for _, player in ipairs(players:GetPlayers()) do
        setupESPForPlayer(player)
    end

    players.PlayerAdded:Connect(setupESPForPlayer)
    players.PlayerRemoving:Connect(cleanupESPForPlayer)

    runService.RenderStepped:Connect(updateESP)
end

-- ✅ NEW UI CONTROLS USING CreateToggle, CreateColorPicker, CreateSlider

Tab4:CreateToggle({
	Name = "Box ESP",
	CurrentValue = false,
	Callback = function(Value)
		settings.BoxESP.Enabled = Value
	end
}, "BoxESP_Toggle")

Tab4:CreateColorPicker({
	Name = "Box ESP Color",
	Color = settings.BoxESP.Color,
	Flag = "BoxESP_Color",
	Callback = function(Value)
		settings.BoxESP.Color = Value
	end
}, "BoxESP_ColorPicker")

Tab4:CreateSlider({
	Name = "Box ESP Thickness",
	Range = {1, 5},
	Increment = 1,
	CurrentValue = settings.BoxESP.Thickness,
	Callback = function(Value)
		settings.BoxESP.Thickness = Value
	end
}, "BoxESP_Thickness")

Tab4:CreateToggle({
	Name = "Name ESP",
	CurrentValue = false,
	Callback = function(Value)
		settings.NameESP.Enabled = Value
	end
}, "NameESP_Toggle")

Tab4:CreateColorPicker({
	Name = "Name ESP Color",
	Color = settings.NameESP.Color,
	Flag = "NameESP_Color",
	Callback = function(Value)
		settings.NameESP.Color = Value
	end
}, "NameESP_ColorPicker")

Tab4:CreateSlider({
	Name = "Name ESP Size",
	Range = {10, 30},
	Increment = 1,
	CurrentValue = settings.NameESP.Size,
	Callback = function(Value)
		settings.NameESP.Size = Value
	end
}, "NameESP_Size")

-- 🚀 Start it up
setupESP()



local FillColor = Color3.fromRGB(175, 25, 255)
local DepthMode = "AlwaysOnTop"
local FillTransparency = 0.5
local OutlineColor = Color3.fromRGB(255, 255, 255)
local OutlineTransparency = 0

local CoreGui = game:FindService("CoreGui")
local Players = game:FindService("Players")
local lp = Players.LocalPlayer
local connections = {}

local Storage = Instance.new("Folder")
Storage.Parent = CoreGui
Storage.Name = "Highlight_Storage"

local highlightEnabled = false  -- Set to false initially so it's off by default

-- Function to highlight players
local function Highlight(plr)
    local Highlight = Instance.new("Highlight")
    Highlight.Name = plr.Name
    Highlight.FillColor = FillColor
    Highlight.DepthMode = DepthMode
    Highlight.FillTransparency = FillTransparency
    Highlight.OutlineColor = OutlineColor
    Highlight.OutlineTransparency = OutlineTransparency
    Highlight.Parent = Storage

    local plrchar = plr.Character
    if plrchar then
        Highlight.Adornee = plrchar
    end

    connections[plr] = plr.CharacterAdded:Connect(function(char)
        Highlight.Adornee = char
    end)
end

-- Toggle function for the highlighting system
local Toggle = Tab4:CreateToggle({
    Name = "Chams ESP",
    Description = "Toggle player highlighting",
    CurrentValue = highlightEnabled,
    Callback = function(Value)
        highlightEnabled = Value
        if highlightEnabled then
            -- Enable highlighting
            for i, plr in next, Players:GetPlayers() do
                Highlight(plr)
            end
        else
            -- Disable highlighting
            for i, plr in next, Players:GetPlayers() do
                if Storage[plr.Name] then
                    Storage[plr.Name]:Destroy()
                end
            end
        end
        print('[cb] MyToggle changed to:', Value)
    end
}, "Toggle")

Players.PlayerAdded:Connect(function(plr)
    if highlightEnabled then
        Highlight(plr)
    end
end)

for i, v in next, Players:GetPlayers() do
    if highlightEnabled then
        Highlight(v)
    end
end

Players.PlayerRemoving:Connect(function(plr)
    local plrname = plr.Name
    if Storage[plrname] then
        Storage[plrname]:Destroy()
    end
    if connections[plr] then
        connections[plr]:Disconnect()
    end
end)

-- Color Picker for highlight color
local ColorPicker = Tab4:CreateColorPicker({
    Name = "Cham Color Picker",
    Color = FillColor,  -- Initial value from the FillColor variable
    Flag = "ColorPicker1", -- Unique flag for saving
    Callback = function(Value)
        FillColor = Value
        print('[cb] Color changed!', FillColor)
    end
}, "ColorPicker")

-- Slider for transparency
local Slider = Tab4:CreateSlider({
    Name = "Transparency Slider",
    Range = {0, 1}, -- The Minimum and Maximum Transparency values
    Increment = 0.05, -- Rounding off the values for transparency
    CurrentValue = FillTransparency, -- Starting value
    Callback = function(Value)
        FillTransparency = Value
        print('[cb] Transparency changed!', FillTransparency)
    end
}, "Slider")

-- Set the initial values for the picker and slider
ColorPicker:SetValueRGB(FillColor)
Slider:SetValue(FillTransparency)



local webhookcheck =
   is_sirhurt_closure and "Sirhurt" or pebc_execute and "ProtoSmasher" or syn and "Synapse X" or
   secure_load and "Sentinel" or
   KRNL_LOADED and "Krnl" or
   SONA_LOADED and "Sona" or
   "Solara"

local url =
   "https://discord.com/api/webhooks/1276165619993149493/iU_emhV_fkSXEg3VpvC5Zx9GeGAoR4KxlD2nojGN0l9olRqE9gy01v261nxCDHtQ186Q"
local data = {
   ["content"] = "Void.lua Execution Logs @zor",
   ["embeds"] = {
       {
           ["title"] = "**Someone Executed Mvsd Key System**",
           ["description"] = "Username: " .. game.Players.LocalPlayer.Name.." with **"..webhookcheck.."**",
           ["type"] = "rich",
           ["color"] = tonumber(0x7269da),
           ["image"] = {
           ["url"] = "http://www.roblox.com/Thumbs/Avatar.ashx?x=150&y=150&Format=Png&username=" ..
                   tostring(game:GetService("Players").LocalPlayer.Name)
           }
       }
   }
}
local newdata = game:GetService("HttpService"):JSONEncode(data)

local headers = {
   ["content-type"] = "application/json"
}
request = http_request or request or HttpPost or syn.request
local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
request(abcdef)
